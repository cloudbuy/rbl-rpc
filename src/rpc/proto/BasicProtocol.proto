package rubble.rpc.basic_protocol;

enum SourceConnectionType
{
  SOURCE_GENERATOR=0;
  SOURCE_RELAY=1;
}

enum DestinationConnectionType
{
  TARGET_RELAY =0;
  TARGET_MARSHALL=1;
}

message ClientRequest
{
  required uint32 service_ordinal = 1;
  required uint32 request_ordinal = 2;
  required string request_string  = 3;
};

enum ClientResponseErrorType
{
  REQUEST_SUCCESS = 0;
  NOT_ACCEPTING_REQUESTS=1;

  // error codes detected in the backend's invoke body
  REQUEST_CLIENT_NOT_ESTABLISHED=2;
  REQUEST_NO_SERVICE_WITH_ORDINAL=3;
  REQUEST_NO_FUNCTION_WITH_ORDINAL=4;
  REQUEST_NOT_SUBSCRIBED=5;
  
  // error codes set from the dispatch (generatoed code) function.
  REQUEST_STRING_PARSE_ERROR=6;
  REQUEST_STRING_SERIALIZE_ERROR=7;
};

message ClientResponse
{
  optional string response_string = 1;
  required ClientResponseErrorType error = 2 [ default = REQUEST_SUCCESS];
};

message HelloRequest
{
  required SourceConnectionType source_type=1;
  required DestinationConnectionType expected_target=2;
  required string node_name=3;
}

enum HelloErrorType
{
  NO_HELLO_ERRORS=0;
  DESTINATION_EXPECTATION_MISMATCH=1;
  SOURCE_EXPECTATION_MISMATCH=2;
  CLIENT_ALLREADY_ESTABLISHED=3;
}

message HelloResponse
{
  required HelloErrorType error_type=1;
}

message ListServicesRequest
{
}

message ServiceEntry
{
  required uint32 service_ordinal=1;
  required string service_name=2;
}

message ListServicesResponse
{
  repeated ServiceEntry services =1;
}


message SubscribeServiceRequest
{
  required uint32 service_ordinal = 1;    
  optional string subscribe_request_string =2;
}

enum ServiceSubscribeErrorType
{
  NO_SUBSCRIBE_SERVICE_ERROR  = 0;
  SERVICE_ORDINAL_NOT_IN_USE  = 1;
  SERVICE_ALLREADY_SUBSCRIBED = 2;
  NO_SUBSCRIPTION_FOR_SERVICE = 3;
}

message SubscribeServiceResponse
{
  required ServiceSubscribeErrorType error = 1;
  optional string subscribe_result_string =2;;
}

message UnsubscribeServiceRequest
{
  required uint32 service_ordinal = 1;
}

message UnsubscribeServiceResponse
{
  required ServiceSubscribeErrorType error = 1;
}


message ListMethodsRequest
{
  required uint32 service_ordinal = 1;
}

enum ListMethodErrorType
{
  NO_LIST_METHOD_ERROR = 0;
  NO_SERVICE_WITH_ORDINAL =1;
}

message MethodEntry
{
  required uint32 service_ordinal = 1;
  required string service_name    = 2;
}

message ListMethodsResponse
{
    required ListMethodErrorType error  = 1;
    repeated MethodEntry methods        = 2;
}

service basic_protocol
{
  rpc hello (HelloRequest) returns (HelloResponse);
  rpc list_services(ListServicesRequest) returns (ListServicesResponse); 
  rpc rpc_subscribe_service(SubscribeServiceRequest) 
    returns (SubscribeServiceResponse);
  rpc rpc_unsubscribe_service(UnsubscribeServiceRequest)
    returns (UnsubscribeServiceResponse);
  rpc list_methods (ListMethodsRequest) returns (ListMethodsResponse); 
}
